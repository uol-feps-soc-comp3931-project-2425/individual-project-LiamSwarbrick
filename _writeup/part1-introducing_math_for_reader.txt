

First you must understand Lambert's cosine law that describes how much light an observer receives from a surface being irradiated by some incoming light.

It states that:
- Given irradiance L_i on a perfectly diffuse surface (perfectly diffuse means incoming light direction doesn't matter as its randomly scattered).
- the amount of outgoing light radiance L_o towards an observer is directly proportional to the cosine of the angle between the observers line of sight and the surface normal.

This gives us a very basic lighting model, L_o = L_i * cos(\theta) where cos(\theta) = n \cdot l.
We can represent a general light reflectance model as a probability distribution D.
Given incoming irradiance onto a point of a surface (known a microfacet, which models tiny divets in a surface that cause the diffuse reflection of light), D is probability distribution of the direction vectors of the outgoing radiance.

The clamped cosine distribution is a lambertian surface clamped to a hemisphere instead of a sphere, radiation comes and goes strictly from above the surface.
Thus the total outgoing light over the unit sphere is 
\int_{\Omega^+} cos(\theta) d\omega
\Omega^+ represents the hemisphere, we integrate over solid angles, which for a unit sphere are equivelant to infinitesimal surface-area elements that cover the hemisphere.

These direction vectors lie on the unit sphere, and our probability distribution must sum to 1 (D must be normalized).
Thus we integrate our cosine formula over the unit hemisphere to find our normalization factor.

Using spherical coordinates (r=1, \theta, \phi) we can easily derive d\omega = r^2 sin(\theta) d\theta d\phi = sin(\theta) d\theta d\phi
\int_{\Omega} max(0, cos(\theta)) d\omega = \int_{\Omega^+} cos(\theta) d\omega
= \int_0^{2\pi} \int_0^{\frac{\pi}{2}} cos(\theta) sin(theta) d\theta d\phi
= \int_0^{2\pi} \int_0^{\frac{\pi}{2}} \frac{sin(2\theta)}{2} d\theta d\phi
= \int_0^{2\pi} [ -\frac{1}{2} cos(2\theta) ]_0^{\pi/2} d\phi
= \frac{1}{2} \int_0^{2\pi} 1 d\phi = \frac{1}{2} [\phi]_0^{2\pi}
= \pi
Since the norm of our clamped cosine distribution is \pi and we need it to be 1, we multiply by \frac{1}{\pi} to get what we will call our original of our original direction vectors D_o(w_o).

D_o(w_o) = \frac{1}{\pi} cos(\theta) over the hemisphere, thus over the entire sphere its...
D_o(w_o) = \frac{1}{\pi} max(0, \theta).
= D_o(w_o=(x,y,z)) = \frac{1}{\pi} max(0, z) since z = cos(\theta) given w_o is a normalized vector on the unit sphere.

^^^^^^^^^^^^^FINISHED DERIVING OUR HEITZ ORIGINAL DISTRIBUTION, THE CLAMPED COSINE.
vvvvvvvvvvvvvNEXT IS DERIVING THE LINEAR TRANSFORMED COSINES

Now to sumarize the paper, we can perform linear transformations to the direction vectors w_o=(x,y,z), ||w_o||=1, of D_o using a 3x3 matrix M.
The transformation gives us a new distribution that can be used to model more complicated lighting models.
The distributions created by applying linear transformations to D_o are called the linearly transformed cosines (LTCs). (Although the linear transformed direction vectors are normalized to the unit sphere, which is not linear, but the name still stands).

Typically physically-based light distribution models are not defined in terms of LTCs, since they operate on point lights, directional lights and spotlights, which are not physically based lights since they do not occupy area.
For instance computing the incoming irradiance from a point light requires the singlular distance to the point light along with light attenuation parameters according to the inverse square law.
Area lights on the other hand require summing up the irradiance from every infinitesimal point on a polygon, which requires integrating over a polygonal area of the distribution rather than sampling a point of it, and thus we want a distribution with closed form integral expressions over spherical polygons (which standard BRDFs do not have, which is why previous to the Heitz paper the best method [citation] was an approximation to integrating the phong lighting model, which itself is lackluster to more modern physically-based BRDFs).

What the clamped cosine distribution gives us is integration over spherical polygons, and Heitz shows that if an original spherical distribution has the following properties:
- an analytic expression
- normalization
- integration over spherical polygons
- importance sampling (which we don't care about I think)
then the linearly transformed distribution maintains these properties.

Heitz also shows which matrices to use to achieve the transformations of the clamped cosine we want for physically based rendering.

With the change of coordinates that with linearly transforming then normalizing the original distribution, we require the Jacobean \frac{d\omega_o}{d\omega}.
i.e. integrating over the polygon P with the new distribution requires integrating over the original distribution * the jacobean of the transformation (which has a closed form expression).

D(\omega) = D_o(\omega) * \frac{d\omega_o}{d\omega}
To flesh out a derivation in the paper...
\int_P D(\omega) d\omega = \int_P D_o(\omega_o) \frac{d\omega_o}{d\omega} d\omega
= \int_{P_o} D_o(\omega_o) d\omega_o.
Where P_o = M^{-1} P

The Jacobean is a matrix given in the paper, but from the notation, see how it appears that \frac{d\omega_o}{d\omega} d\omega cancels each other out to give the integral over d\omega_o.

================

Before runtime we precompute LTC matrices for a range of BRDF parameters (e.g. \theta_v=0.1, \alpha=45\degree)
A 2D 64x64 texture is used to store (x=\theta \in [0, \frac{\pi}{2}], y=\sqrt{\alpha} \in [0, 1]).
each point (\theta, \alpha) stores the 4 values a,b,c,d, used in the 3x3 matrix M for that \alpha (specular roughness) and \theta_v (view angle).
We also store a 5th value for the norm of the brdf (total radiance towards to the viewer by integrating the incoming light from each inbound solid angle).
- The norm represents the total output energy of the brdf towards to the viewer, which should be less than or equal to 1 to ensure energy conservation in physically based rendering,
  mathematically it is \int_{\Omega} \rho(\omega_v, \omega_l) cos\theta_l d\omega_l
  and is used to normalize the fitted LTC-based BRDF distributed to make sure it has the same total reflectance as the underlying BRDF being approximated.
The 64x64 5-value texture is sampled with linear interpolation to have values for every possible BRDF.
64*64*5*sizeof(float)/1024 = 80 (so 80KB of data to store the texture).

The texture was precomuted via a best-fit by non-linear optimisation [slide 66 of the ltc slides].



