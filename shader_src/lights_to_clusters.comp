#version 460 core

// Different sizes yield similar performance results, Intel Iris likely prefers 512
#define LOCAL_SIZE 512//128
layout (local_size_x = LOCAL_SIZE, local_size_y = 1, local_size_z = 1) in;

struct PointLight
{
    vec4 position_xyz_range_w;
    vec4 color_rgb_intensity_a;
};

#ifndef CLUSTER_MAX_LIGHTS
    #define CLUSTER_MAX_LIGHTS 100
#endif
struct Cluster
{
    vec4 min_point;
    vec4 max_point;
    uint count;
    uint light_indices[CLUSTER_MAX_LIGHTS];
};

layout (std430, binding = 0) restrict buffer point_light_ssbo
{
    PointLight point_lights[];
};

layout (std430, binding = 1) restrict buffer cluster_ssbo
{
    Cluster clusters[];
};

// layout (location = 0) uniform mat4 view_matrix;
layout (location = 1) uniform uint num_point_lights;

bool
sphere_AABB_intersection(vec3 center, float radius, vec3 aabb_min, vec3 aabb_max)
{
    // Cloest point of AABB to the center of the sphere
    vec3 closest_point = clamp(center, aabb_min, aabb_max);
    closest_point -= center;
    float distance_squared = dot(closest_point, closest_point);
    return distance_squared <= radius * radius;
}

bool
test_sphere_aabb(uint i, Cluster cluster)
{
    // vec3 center = vec3(view_matrix * vec4(point_lights[i].position_xyz_range_w.xyz, 1.0));
    vec3 center = point_lights[i].position_xyz_range_w.xyz;  // <- lights are already in view space
    float radius = point_lights[i].position_xyz_range_w.w;

    vec3 aabb_min = cluster.min_point.xyz;
    vec3 aabb_max = cluster.max_point.xyz;

    return sphere_AABB_intersection(center, radius, aabb_min, aabb_max);
}

void
main()
{
    uint light_count = num_point_lights;  // TODO: See if this works instead of providing num_point_lights
    uint index = gl_GlobalInvocationID.x;
    Cluster cluster = clusters[index];

    // Reinitialize count to 0 before computing this frames cluster
    cluster.count = 0;

    for (uint i = 0; i < light_count; ++i)
    {
        if (test_sphere_aabb(i, cluster) && cluster.count < CLUSTER_MAX_LIGHTS)
        {
            cluster.light_indices[cluster.count++] = i;
        }
    }
    clusters[index] = cluster;
}
