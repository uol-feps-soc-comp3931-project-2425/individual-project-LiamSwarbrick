#version 460 core

// Each workgroup now processes exactly one cluster:

// Different sizes yield similar performance results, Intel Iris likely prefers 512
#ifdef INTEGRATED_GPU
    #define LOCAL_SIZE 32  // keep it small to stay below total allowed invocations
#else
    #define LOCAL_SIZE 32//64
#endif
layout (local_size_x = LOCAL_SIZE, local_size_y = 1, local_size_z = 1) in;

struct PointLight
{
    vec4 position_xyz_range_w;
    vec4 color_rgb_intensity_a;
};

struct AreaLight
{
    vec4 color_rgb_intensity_a;
    int n;
    int is_double_sided;
    float _packing0, _packing1;
    vec4 aabb_min;
    vec4 aabb_max;
    vec4 sphere_of_influence_center_xyz_radius_w;
    vec4 points_viewspace[MAX_UNCLIPPED_NGON];  // 4th component unused, vec3[] would be packed the same way but vec3 is implemented wrong on some drivers
};

#ifndef CLUSTER_MAX_LIGHTS
    #define CLUSTER_MAX_LIGHTS 100
#endif
struct Cluster
{
    vec4 min_point;
    vec4 max_point;
    uint point_count;
    uint area_count;
    uint point_indices[CLUSTER_MAX_LIGHTS/2];
    uint area_indices[CLUSTER_MAX_LIGHTS/2];
    uint area_light_flags[CLUSTER_MAX_LIGHTS/2];  // 0b00 = neither, 0b01 = diffuse, 0b10 = specular, 0b11 = both
};

layout (std430, binding = 0) restrict buffer point_light_ssbo
{
    PointLight point_lights[];
};

layout (std430, binding = 2) restrict buffer area_light_ssbo
{
    AreaLight area_lights[];
};

layout (std430, binding = 1) restrict buffer cluster_ssbo
{
    Cluster clusters[];
};

// layout (location = 0) uniform mat4 view_matrix;
layout (location = 1) uniform uint num_point_lights;
layout (location = 2) uniform uint num_area_lights;
// layout (location = 3) uniform float param_roughness;
// layout (location = 4) uniform float param_min_intensity;
// layout (location = 5) uniform float param_intensity_saturation;

layout (binding = 7) uniform usamplerCube cluster_normals_cubemap;
layout (binding = 8) uniform sampler1D representative_normals_texture;



shared Cluster cluster;  // Declare a shared instance of Cluster for the workgroup.


#define M_PI 3.1415926535897932384626433832795

struct NormalCone
{
    float half_angle;
    float cos_threshold;
    float sin_threshold;
    vec3 cluster_normal;
};

struct Cone
{
    vec3 axis;
    float angle;  // Half angle
};

Cone
compute_specular_cone(vec3 cluster_center, Cone cluster_cone, vec3 light_center, float max_spec_angle)
{
    Cone light_cone;
    light_cone.axis = normalize(reflect(light_center - cluster_center, cluster_cone.axis));
    light_cone.angle = max_spec_angle + cluster_cone.angle * 2.0;  // <- shown geometrically in my notes

// light_geo_radius = 0.5*distance(p0, p2) as an argument
    // float distance = length(light_center);
    // float light_angular_size = atan(light_geo_radius / distance);
    // light_cone.angle += light_angular_size;

    // light_cone.angle += radians(90.0 / CLUSTER_GRID_SIZE_X);  // at fov 90

    return light_cone;
}

bool
specular_visible(Cone light_cone, vec3 view_dir)
{
    float a = acos(dot(light_cone.axis, normalize(-view_dir)));
    return a <= light_cone.angle;
}

bool
sphere_aabb_intersection(vec3 center, float radius, vec3 aabb_min, vec3 aabb_max)
{
    // Closest point of AABB to the center of the sphere
    vec3 closest_point = clamp(center, aabb_min, aabb_max);
    closest_point -= center;
    float distance_squared = dot(closest_point, closest_point);
    return distance_squared <= radius * radius;
}

bool
test_sphere_aabb(uint i, Cluster cluster, NormalCone normal_cone)
{
    // Does light affect this cluster based on position
    vec3 light_pos = point_lights[i].position_xyz_range_w.xyz;  // <- lights are already in view space
    float radius = point_lights[i].position_xyz_range_w.w;
    if (!sphere_aabb_intersection(light_pos, radius, cluster.min_point.xyz, cluster.max_point.xyz))
    {
        return false;
    }

#if CLUSTER_NORMALS_COUNT != 1
// // NOTE: Backface culling pointlights not working properly
    // vec3 cluster_center = (cluster.min_point.xyz + cluster.max_point.xyz) * 0.5;
    // vec3 to_light = normalize(light_pos - cluster_center);
    // float cos_omega = dot(normal_cone.cluster_normal, to_light);

    // float cluster_radius = length(cluster.max_point.xyz - cluster.min_point.xyz) * 0.5;
    // float light_dist = length(light_pos - cluster_center);
    // float cos_delta = cluster_radius / light_dist;
    // float delta = acos(clamp(cos_delta, -1.0, 1.0)); // Clamp for numerical stability

    // float threshold = cos(3.14159265 * 0.5 + normal_cone.half_angle + delta);

    // Cull the light if it's completely behind
    // if (cos_omega < threshold)
    //     return false;
#endif

    return true;
}

bool
aabb_aabb_intersect(vec3 aabb1_min, vec3 aabb1_max, 
                         vec3 aabb2_min, vec3 aabb2_max) 
{
    // Bloody epic mate
    // bvec3 overlap = greaterThanEqual(aabb1_max, aabb2_min) &  // & operator not supported on some drivers
    //                lessThanEqual(aabb1_min, aabb2_max);
    // return all(overlap);

    return all(greaterThanEqual(aabb1_max, aabb2_min)) && all(lessThanEqual(aabb1_min, aabb2_max));
}

bool
is_aabb_fully_behind_plane(vec3 aabb_min, vec3 aabb_max, vec3 plane_normal, float plane_constant)
{
    // Plane defined by dot(N,X) + d = 0

    // Get the point in the further direction of the normal
    vec3 furthest_point = vec3(
        plane_normal.x >= 0.0 ? aabb_max.x : aabb_min.x,
        plane_normal.y >= 0.0 ? aabb_max.y : aabb_min.y,
        plane_normal.z >= 0.0 ? aabb_max.z : aabb_min.z
    );

    float signed_distance = dot(plane_normal, furthest_point) + plane_constant;

    // If the signed distance to point closest to the positive side of the plane is negative
    // Then the AABB is behind the plane
    return signed_distance < 0;
}

uint
test_arealight(uint i, Cluster cluster, NormalCone nc)
{
    vec3 cluster_center = (cluster.min_point.xyz + cluster.max_point.xyz) * 0.5;
    vec4 sphere = area_lights[i].sphere_of_influence_center_xyz_radius_w;
    vec3 view_dir = normalize(-cluster_center);

    // Half space rejection for single sided area lights
    if (area_lights[i].is_double_sided == 0)
    {
        vec3 p0 = area_lights[i].points_viewspace[0].xyz;
        vec3 p1 = area_lights[i].points_viewspace[1].xyz;
        vec3 p2 = area_lights[i].points_viewspace[2].xyz;
        vec3 light_normal = cross(p1 - p0, p2 - p0);

        // Fast center test before exact check
        if (dot(cluster_center - p0, light_normal) < 0)
        {
            float plane_constant = -dot(light_normal, p0);
            vec3 furthest_point = mix(cluster.max_point.xyz, cluster.min_point.xyz, lessThan(light_normal, vec3(0)));
            if (dot(light_normal, furthest_point) + plane_constant < 0)
            {
                return 0u;
            }
        }
    }

    // Diffuse test
    bool diffuse_passed = false;
    if (aabb_aabb_intersect(area_lights[i].aabb_min.xyz, area_lights[i].aabb_max.xyz, cluster.min_point.xyz, cluster.max_point.xyz))
    {
        diffuse_passed = sphere_aabb_intersection(sphere.xyz, sphere.w, cluster.min_point.xyz, cluster.max_point.xyz);
        // #if CLUSTER_NORMALS_COUNT == 1
        //     diffuse_passed = sphere_aabb_intersection(sphere.xyz, sphere.w, cluster.min_point.xyz, cluster.max_point.xyz);
        // #else
        //     // Normal based diffuse culling
        //     vec3 light_dir = normalize(sphere.xyz - cluster_center);
        //     float cos_theta = dot(nc.cluster_normal, light_dir);
        //     diffuse_passed = cos_theta > (0.2 - nc.half_angle);
        // #endif
    }

    // Specular test
    bool specular_passed = false;

    #if CLUSTER_NORMALS_COUNT == 1
        // dif: Diffuse bounds only:
        specular_passed = diffuse_passed;

        // Specular 1: Naive extending for less specular artefacts
        // specular_passed = sphere_aabb_intersection(sphere.xyz, 1.5 * sphere.w, cluster.min_point.xyz, cluster.max_point.xyz);
    #else
        // Specular 2: Light cones
        Cone cluster_cone;
        cluster_cone.axis = nc.cluster_normal;
        cluster_cone.angle = nc.half_angle;

        Cone light_cone = compute_specular_cone(
            cluster_center,
            cluster_cone,
            sphere.xyz,
            radians(45.0)
        );
        specular_passed = specular_visible(light_cone, view_dir);

        // Include diffuse term since this breaks down near the light otherwise
        specular_passed = specular_passed || diffuse_passed;

        // Sadly, we have to include a range limit too, otherwise we assign far too much of the screen:
        specular_passed = specular_passed && sphere_aabb_intersection(sphere.xyz, 1.5 * sphere.w, cluster.min_point.xyz, cluster.max_point.xyz);
    #endif

    // Seperate diffuse and specular light culling
    uint result = 0u;
    if (diffuse_passed)  result |= 0x1u;
    if (specular_passed) result |= 0x2u;
    return result;
}

void
main()
{
    // Load the cluster from global memory into shared memory.
    uint index = gl_WorkGroupID.x;
    if (gl_LocalInvocationID.x == 0)
    {
        cluster = clusters[index];

        // Reset our light counts.
        cluster.point_count = 0u;
        cluster.area_count = 0u;
    }
    barrier();  // Ensure all threads see the loaded cluster

    uint clusters_per_layer = CLUSTER_GRID_SIZE_X * CLUSTER_GRID_SIZE_Y;
    uint combined_z = index / clusters_per_layer;
    uint remainder = index % clusters_per_layer;
    uint normal_bin = combined_z % CLUSTER_NORMALS_COUNT;

    NormalCone normal_cone;
    #if CLUSTER_NORMALS_COUNT > 1
        float n = sqrt(CLUSTER_NORMALS_COUNT/6);  // since CLUSTER_NORMALS_COUNT= 6n^2
        float h = 1.0 / n;
        if (int(n) % 2 == 0)
        {
            normal_cone.half_angle = acos(dot(normalize(vec3(h, 1.0, h)), normalize(vec3(2.0*h, 1.0, 2.0*h))));
        }
        else
        {
            normal_cone.half_angle = acos(normalize(vec3(h, 1.0, h).y));  // NOTE: vec.y = dot(vec, vec3(0,1,0))
        }
        normal_cone.cluster_normal = texture(representative_normals_texture, normal_bin / float(textureSize(representative_normals_texture, 0))).rgb;//representative_normals[normal_bin];
    #else
        // When CLUSTER_NORMALS_COUNT == 1, the normal cone will be optimized for the floor
        normal_cone.half_angle = 0.8*M_PI;
        normal_cone.cluster_normal = vec3(0.0, 1.0, 0.0);
    #endif
    normal_cone.cos_threshold = cos(normal_cone.half_angle);
    normal_cone.sin_threshold = sin(normal_cone.half_angle);

    const uint max_point_lights = CLUSTER_MAX_LIGHTS/2;
    const uint max_area_lights = CLUSTER_MAX_LIGHTS/2;

    uint total_threads = gl_WorkGroupSize.x;
    uint local_thread_id = gl_LocalInvocationID.x;

    // Each thread processes a slice of point lights.
    for (uint i = local_thread_id; i < num_point_lights; i += total_threads)
    {
        if (test_sphere_aabb(i, cluster, normal_cone))
        {
            uint point_index = atomicAdd(cluster.point_count, 1u);
            if (point_index < max_point_lights)
            {
                cluster.point_indices[point_index] = i;
            }
        }
    }

    barrier();

    // And then a slice of the area lights
    for (uint i = local_thread_id; i < num_area_lights; i += total_threads)
    {
        uint contribution_flags = test_arealight(i, cluster, normal_cone);
        if (contribution_flags != 0u)
        {
            uint area_index = atomicAdd(cluster.area_count, 1u);
            if (area_index < max_area_lights)
            {
                cluster.area_indices[area_index] = i;
                cluster.area_light_flags[area_index] = contribution_flags;
            }
        }
    }

    barrier();

    if (gl_LocalInvocationID.x == 0)
    {
        clusters[index] = cluster;
    }
}
